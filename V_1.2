{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "987f3ddc",
   "metadata": {
    "papermill": {
     "duration": 0.00726,
     "end_time": "2024-07-10T11:26:47.037051",
     "exception": false,
     "start_time": "2024-07-10T11:26:47.029791",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e508da86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:47.053241Z",
     "iopub.status.busy": "2024-07-10T11:26:47.052485Z",
     "iopub.status.idle": "2024-07-10T11:26:49.074294Z",
     "shell.execute_reply": "2024-07-10T11:26:49.073302Z"
    },
    "papermill": {
     "duration": 2.032714,
     "end_time": "2024-07-10T11:26:49.076807",
     "exception": false,
     "start_time": "2024-07-10T11:26:47.044093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb86710c",
   "metadata": {
    "papermill": {
     "duration": 0.006727,
     "end_time": "2024-07-10T11:26:49.090707",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.083980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Air pollution dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ae0e4e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.106695Z",
     "iopub.status.busy": "2024-07-10T11:26:49.105784Z",
     "iopub.status.idle": "2024-07-10T11:26:49.239532Z",
     "shell.execute_reply": "2024-07-10T11:26:49.238660Z"
    },
    "papermill": {
     "duration": 0.144447,
     "end_time": "2024-07-10T11:26:49.242103",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.097656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "path_air='/kaggle/input/air-pollution/air-pollution.csv'\n",
    "air_df = pd.read_csv(path_air)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab422351",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.258285Z",
     "iopub.status.busy": "2024-07-10T11:26:49.257527Z",
     "iopub.status.idle": "2024-07-10T11:26:49.285260Z",
     "shell.execute_reply": "2024-07-10T11:26:49.284172Z"
    },
    "papermill": {
     "duration": 0.038435,
     "end_time": "2024-07-10T11:26:49.287694",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.249259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "      <th>Unnamed: 10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>1750</td>\n",
       "      <td>555.47860</td>\n",
       "      <td>174.87167</td>\n",
       "      <td>142073.31</td>\n",
       "      <td>5456.8850</td>\n",
       "      <td>13596.633</td>\n",
       "      <td>1633.0308</td>\n",
       "      <td>7681.0464</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>1760</td>\n",
       "      <td>578.50757</td>\n",
       "      <td>181.99332</td>\n",
       "      <td>147859.23</td>\n",
       "      <td>5679.1167</td>\n",
       "      <td>14150.870</td>\n",
       "      <td>1699.5359</td>\n",
       "      <td>8000.8574</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>1770</td>\n",
       "      <td>602.47980</td>\n",
       "      <td>189.38850</td>\n",
       "      <td>153867.40</td>\n",
       "      <td>5909.8840</td>\n",
       "      <td>14726.470</td>\n",
       "      <td>1768.5956</td>\n",
       "      <td>8333.9610</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>1780</td>\n",
       "      <td>627.43220</td>\n",
       "      <td>197.06535</td>\n",
       "      <td>160104.42</td>\n",
       "      <td>6149.4410</td>\n",
       "      <td>15324.077</td>\n",
       "      <td>1840.2854</td>\n",
       "      <td>8680.9060</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>1790</td>\n",
       "      <td>653.40310</td>\n",
       "      <td>205.03189</td>\n",
       "      <td>166576.77</td>\n",
       "      <td>6398.0370</td>\n",
       "      <td>15944.332</td>\n",
       "      <td>1914.6805</td>\n",
       "      <td>9042.2660</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Entity Code  Year  Nitrogen oxide (NOx)  \\\n",
       "0  Afghanistan  AFG  1750             555.47860   \n",
       "1  Afghanistan  AFG  1760             578.50757   \n",
       "2  Afghanistan  AFG  1770             602.47980   \n",
       "3  Afghanistan  AFG  1780             627.43220   \n",
       "4  Afghanistan  AFG  1790             653.40310   \n",
       "\n",
       "   Sulphur dioxide (SO₂) emissions  Carbon monoxide (CO) emissions  \\\n",
       "0                        174.87167                       142073.31   \n",
       "1                        181.99332                       147859.23   \n",
       "2                        189.38850                       153867.40   \n",
       "3                        197.06535                       160104.42   \n",
       "4                        205.03189                       166576.77   \n",
       "\n",
       "   Organic carbon (OC) emissions  \\\n",
       "0                      5456.8850   \n",
       "1                      5679.1167   \n",
       "2                      5909.8840   \n",
       "3                      6149.4410   \n",
       "4                      6398.0370   \n",
       "\n",
       "   Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "0                                          13596.633          \n",
       "1                                          14150.870          \n",
       "2                                          14726.470          \n",
       "3                                          15324.077          \n",
       "4                                          15944.332          \n",
       "\n",
       "   Black carbon (BC) emissions  Ammonia (NH₃) emissions  Unnamed: 10  \n",
       "0                    1633.0308                7681.0464          NaN  \n",
       "1                    1699.5359                8000.8574          NaN  \n",
       "2                    1768.5956                8333.9610          NaN  \n",
       "3                    1840.2854                8680.9060          NaN  \n",
       "4                    1914.6805                9042.2660          NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80b758d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.304395Z",
     "iopub.status.busy": "2024-07-10T11:26:49.303707Z",
     "iopub.status.idle": "2024-07-10T11:26:49.331044Z",
     "shell.execute_reply": "2024-07-10T11:26:49.330012Z"
    },
    "papermill": {
     "duration": 0.038416,
     "end_time": "2024-07-10T11:26:49.333481",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.295065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 48225 entries, 0 to 48224\n",
      "Data columns (total 11 columns):\n",
      " #   Column                                                    Non-Null Count  Dtype  \n",
      "---  ------                                                    --------------  -----  \n",
      " 0   Entity                                                    48225 non-null  object \n",
      " 1   Code                                                      45717 non-null  object \n",
      " 2   Year                                                      48225 non-null  int64  \n",
      " 3   Nitrogen oxide (NOx)                                      48225 non-null  float64\n",
      " 4   Sulphur dioxide (SO₂) emissions                           48225 non-null  float64\n",
      " 5   Carbon monoxide (CO) emissions                            48225 non-null  float64\n",
      " 6   Organic carbon (OC) emissions                             48225 non-null  float64\n",
      " 7   Non-methane volatile organic compounds (NMVOC) emissions  48225 non-null  float64\n",
      " 8   Black carbon (BC) emissions                               48225 non-null  float64\n",
      " 9   Ammonia (NH₃) emissions                                   48225 non-null  float64\n",
      " 10  Unnamed: 10                                               0 non-null      float64\n",
      "dtypes: float64(8), int64(1), object(2)\n",
      "memory usage: 4.0+ MB\n"
     ]
    }
   ],
   "source": [
    "air_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "107550bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.350993Z",
     "iopub.status.busy": "2024-07-10T11:26:49.350128Z",
     "iopub.status.idle": "2024-07-10T11:26:49.400330Z",
     "shell.execute_reply": "2024-07-10T11:26:49.399276Z"
    },
    "papermill": {
     "duration": 0.061681,
     "end_time": "2024-07-10T11:26:49.402653",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.340972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "      <th>Unnamed: 10</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>48225.000000</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>4.822500e+04</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1911.032970</td>\n",
       "      <td>5.407779e+05</td>\n",
       "      <td>8.091183e+05</td>\n",
       "      <td>4.885731e+06</td>\n",
       "      <td>1.315203e+05</td>\n",
       "      <td>8.771926e+05</td>\n",
       "      <td>4.738836e+04</td>\n",
       "      <td>3.521420e+05</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>67.608974</td>\n",
       "      <td>4.408950e+06</td>\n",
       "      <td>5.761058e+06</td>\n",
       "      <td>2.851080e+07</td>\n",
       "      <td>6.740897e+05</td>\n",
       "      <td>5.769500e+06</td>\n",
       "      <td>2.769505e+05</td>\n",
       "      <td>2.326560e+06</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1750.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1854.000000</td>\n",
       "      <td>1.569637e+02</td>\n",
       "      <td>6.362120e+01</td>\n",
       "      <td>1.367615e+04</td>\n",
       "      <td>5.955074e+02</td>\n",
       "      <td>2.313765e+03</td>\n",
       "      <td>1.490397e+02</td>\n",
       "      <td>1.370903e+03</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1913.000000</td>\n",
       "      <td>1.781608e+03</td>\n",
       "      <td>9.523438e+02</td>\n",
       "      <td>1.087148e+05</td>\n",
       "      <td>4.429489e+03</td>\n",
       "      <td>1.770346e+04</td>\n",
       "      <td>1.090644e+03</td>\n",
       "      <td>9.434461e+03</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1970.000000</td>\n",
       "      <td>3.104208e+04</td>\n",
       "      <td>3.370849e+04</td>\n",
       "      <td>6.107858e+05</td>\n",
       "      <td>2.220716e+04</td>\n",
       "      <td>1.132467e+05</td>\n",
       "      <td>6.594997e+03</td>\n",
       "      <td>5.192593e+04</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2022.000000</td>\n",
       "      <td>1.092431e+08</td>\n",
       "      <td>1.345966e+08</td>\n",
       "      <td>5.999133e+08</td>\n",
       "      <td>1.361832e+07</td>\n",
       "      <td>1.354817e+08</td>\n",
       "      <td>6.141969e+06</td>\n",
       "      <td>6.394764e+07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
       "count  48225.000000          4.822500e+04                     4.822500e+04   \n",
       "mean    1911.032970          5.407779e+05                     8.091183e+05   \n",
       "std       67.608974          4.408950e+06                     5.761058e+06   \n",
       "min     1750.000000          0.000000e+00                     0.000000e+00   \n",
       "25%     1854.000000          1.569637e+02                     6.362120e+01   \n",
       "50%     1913.000000          1.781608e+03                     9.523438e+02   \n",
       "75%     1970.000000          3.104208e+04                     3.370849e+04   \n",
       "max     2022.000000          1.092431e+08                     1.345966e+08   \n",
       "\n",
       "       Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
       "count                    4.822500e+04                   4.822500e+04   \n",
       "mean                     4.885731e+06                   1.315203e+05   \n",
       "std                      2.851080e+07                   6.740897e+05   \n",
       "min                      0.000000e+00                   0.000000e+00   \n",
       "25%                      1.367615e+04                   5.955074e+02   \n",
       "50%                      1.087148e+05                   4.429489e+03   \n",
       "75%                      6.107858e+05                   2.220716e+04   \n",
       "max                      5.999133e+08                   1.361832e+07   \n",
       "\n",
       "       Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "count                                       4.822500e+04          \n",
       "mean                                        8.771926e+05          \n",
       "std                                         5.769500e+06          \n",
       "min                                         0.000000e+00          \n",
       "25%                                         2.313765e+03          \n",
       "50%                                         1.770346e+04          \n",
       "75%                                         1.132467e+05          \n",
       "max                                         1.354817e+08          \n",
       "\n",
       "       Black carbon (BC) emissions  Ammonia (NH₃) emissions  Unnamed: 10  \n",
       "count                 4.822500e+04             4.822500e+04          0.0  \n",
       "mean                  4.738836e+04             3.521420e+05          NaN  \n",
       "std                   2.769505e+05             2.326560e+06          NaN  \n",
       "min                   0.000000e+00             0.000000e+00          NaN  \n",
       "25%                   1.490397e+02             1.370903e+03          NaN  \n",
       "50%                   1.090644e+03             9.434461e+03          NaN  \n",
       "75%                   6.594997e+03             5.192593e+04          NaN  \n",
       "max                   6.141969e+06             6.394764e+07          NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de77afeb",
   "metadata": {
    "papermill": {
     "duration": 0.007503,
     "end_time": "2024-07-10T11:26:49.417907",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.410404",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Manejo de valores faltantes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "91ee7a05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.435028Z",
     "iopub.status.busy": "2024-07-10T11:26:49.434660Z",
     "iopub.status.idle": "2024-07-10T11:26:49.446787Z",
     "shell.execute_reply": "2024-07-10T11:26:49.445617Z"
    },
    "papermill": {
     "duration": 0.02332,
     "end_time": "2024-07-10T11:26:49.449036",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.425716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entity                                                          0\n",
      "Code                                                         2508\n",
      "Year                                                            0\n",
      "Nitrogen oxide (NOx)                                            0\n",
      "Sulphur dioxide (SO₂) emissions                                 0\n",
      "Carbon monoxide (CO) emissions                                  0\n",
      "Organic carbon (OC) emissions                                   0\n",
      "Non-methane volatile organic compounds (NMVOC) emissions        0\n",
      "Black carbon (BC) emissions                                     0\n",
      "Ammonia (NH₃) emissions                                         0\n",
      "Unnamed: 10                                                 48225\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(air_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15ba5867",
   "metadata": {
    "papermill": {
     "duration": 0.007975,
     "end_time": "2024-07-10T11:26:49.465014",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.457039",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "La columna Unnamed: 10 no aporta mucha informacion o no entendemos que quiere decir, por lo que la eliminaremos. Podemos tolerar los valores faltantes de la columna code, debido a que estos solo representan el acronimo del nombre del pais, nos quedaremos usando el nombre del pais."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7402a5ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.483556Z",
     "iopub.status.busy": "2024-07-10T11:26:49.482630Z",
     "iopub.status.idle": "2024-07-10T11:26:49.492363Z",
     "shell.execute_reply": "2024-07-10T11:26:49.491333Z"
    },
    "papermill": {
     "duration": 0.021601,
     "end_time": "2024-07-10T11:26:49.494526",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.472925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "air_df = air_df.drop(columns=['Unnamed: 10', 'Code'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ed9fd429",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.512615Z",
     "iopub.status.busy": "2024-07-10T11:26:49.511712Z",
     "iopub.status.idle": "2024-07-10T11:26:49.529228Z",
     "shell.execute_reply": "2024-07-10T11:26:49.528073Z"
    },
    "papermill": {
     "duration": 0.029033,
     "end_time": "2024-07-10T11:26:49.531613",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.502580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1750</td>\n",
       "      <td>555.47860</td>\n",
       "      <td>174.87167</td>\n",
       "      <td>142073.31</td>\n",
       "      <td>5456.8850</td>\n",
       "      <td>13596.633</td>\n",
       "      <td>1633.0308</td>\n",
       "      <td>7681.0464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1760</td>\n",
       "      <td>578.50757</td>\n",
       "      <td>181.99332</td>\n",
       "      <td>147859.23</td>\n",
       "      <td>5679.1167</td>\n",
       "      <td>14150.870</td>\n",
       "      <td>1699.5359</td>\n",
       "      <td>8000.8574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1770</td>\n",
       "      <td>602.47980</td>\n",
       "      <td>189.38850</td>\n",
       "      <td>153867.40</td>\n",
       "      <td>5909.8840</td>\n",
       "      <td>14726.470</td>\n",
       "      <td>1768.5956</td>\n",
       "      <td>8333.9610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1780</td>\n",
       "      <td>627.43220</td>\n",
       "      <td>197.06535</td>\n",
       "      <td>160104.42</td>\n",
       "      <td>6149.4410</td>\n",
       "      <td>15324.077</td>\n",
       "      <td>1840.2854</td>\n",
       "      <td>8680.9060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1790</td>\n",
       "      <td>653.40310</td>\n",
       "      <td>205.03189</td>\n",
       "      <td>166576.77</td>\n",
       "      <td>6398.0370</td>\n",
       "      <td>15944.332</td>\n",
       "      <td>1914.6805</td>\n",
       "      <td>9042.2660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Entity  Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
       "0  Afghanistan  1750             555.47860                        174.87167   \n",
       "1  Afghanistan  1760             578.50757                        181.99332   \n",
       "2  Afghanistan  1770             602.47980                        189.38850   \n",
       "3  Afghanistan  1780             627.43220                        197.06535   \n",
       "4  Afghanistan  1790             653.40310                        205.03189   \n",
       "\n",
       "   Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
       "0                       142073.31                      5456.8850   \n",
       "1                       147859.23                      5679.1167   \n",
       "2                       153867.40                      5909.8840   \n",
       "3                       160104.42                      6149.4410   \n",
       "4                       166576.77                      6398.0370   \n",
       "\n",
       "   Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "0                                          13596.633          \n",
       "1                                          14150.870          \n",
       "2                                          14726.470          \n",
       "3                                          15324.077          \n",
       "4                                          15944.332          \n",
       "\n",
       "   Black carbon (BC) emissions  Ammonia (NH₃) emissions  \n",
       "0                    1633.0308                7681.0464  \n",
       "1                    1699.5359                8000.8574  \n",
       "2                    1768.5956                8333.9610  \n",
       "3                    1840.2854                8680.9060  \n",
       "4                    1914.6805                9042.2660  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "air_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75f26ca3",
   "metadata": {
    "papermill": {
     "duration": 0.007909,
     "end_time": "2024-07-10T11:26:49.548100",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.540191",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preparando el dataset para hacer algunas graficas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0dc4897c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.566744Z",
     "iopub.status.busy": "2024-07-10T11:26:49.565810Z",
     "iopub.status.idle": "2024-07-10T11:26:49.584358Z",
     "shell.execute_reply": "2024-07-10T11:26:49.583272Z"
    },
    "papermill": {
     "duration": 0.030634,
     "end_time": "2024-07-10T11:26:49.586873",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.556239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Hacemos un diccionario que asigne a cada pais su correspondiente continente\n",
    "\n",
    "continent_mapping = {\n",
    "    'Afghanistan': 'Asia', 'Albania': 'Europe', 'Algeria': 'Africa', 'American Samoa': 'Oceania', 'Angola': 'Africa',\n",
    "    'Antigua and Barbuda': 'North America', 'Argentina': 'South America', 'Armenia': 'Asia', 'Aruba': 'North America',\n",
    "    'Australia': 'Oceania', 'Austria': 'Europe', 'Azerbaijan': 'Asia', 'Bahamas': 'North America', 'Bahrain': 'Asia',\n",
    "    'Bangladesh': 'Asia', 'Barbados': 'North America', 'Belarus': 'Europe', 'Belgium': 'Europe', 'Belize': 'North America',\n",
    "    'Benin': 'Africa', 'Bermuda': 'North America', 'Bhutan': 'Asia', 'Bolivia': 'South America', \n",
    "    'Bosnia and Herzegovina': 'Europe', 'Botswana': 'Africa', 'Brazil': 'South America', \n",
    "    'British Virgin Islands': 'North America', 'Brunei': 'Asia', 'Bulgaria': 'Europe', 'Burkina Faso': 'Africa', \n",
    "    'Burundi': 'Africa', 'Cambodia': 'Asia', 'Cameroon': 'Africa', 'Canada': 'North America', 'Cape Verde': 'Africa', \n",
    "    'Cayman Islands': 'North America', 'Central African Republic': 'Africa', 'Chad': 'Africa', 'Chile': 'South America', \n",
    "    'China': 'Asia', 'Colombia': 'South America', 'Comoros': 'Africa', 'Congo': 'Africa', 'Cook Islands': 'Oceania', \n",
    "    'Costa Rica': 'North America', \"Cote d'Ivoire\": 'Africa', 'Croatia': 'Europe', 'Cuba': 'North America', 'Curacao': 'North America', \n",
    "    'Cyprus': 'Asia', 'Czechia': 'Europe', 'Democratic Republic of Congo': 'Africa', 'Denmark': 'Europe', \n",
    "    'Djibouti': 'Africa', 'Dominica': 'North America', 'Dominican Republic': 'North America', 'Ecuador': 'South America', \n",
    "    'Egypt': 'Africa', 'El Salvador': 'North America', 'Equatorial Guinea': 'Africa', 'Eritrea': 'Africa', 'Estonia': 'Europe', \n",
    "    'Eswatini': 'Africa', 'Ethiopia': 'Africa', 'Falkland Islands': 'South America', 'Faroe Islands': 'Europe', 'Fiji': 'Oceania', \n",
    "    'Finland': 'Europe', 'France': 'Europe', 'French Guiana': 'South America', 'French Polynesia': 'Oceania', 'Gabon': 'Africa', \n",
    "    'Gambia': 'Africa', 'Georgia': 'Asia', 'Germany': 'Europe', 'Ghana': 'Africa', 'Gibraltar': 'Europe', 'Greece': 'Europe', \n",
    "    'Greenland': 'North America', 'Grenada': 'North America', 'Guadeloupe': 'North America', 'Guam': 'Oceania', \n",
    "    'Guatemala': 'North America', 'Guinea': 'Africa', 'Guinea-Bissau': 'Africa', 'Guyana': 'South America', 'Haiti': 'North America', \n",
    "    'Honduras': 'North America', 'Hong Kong': 'Asia', 'Hungary': 'Europe', 'Iceland': 'Europe', 'India': 'Asia', 'Indonesia': 'Asia', \n",
    "    'Iran': 'Asia', 'Iraq': 'Asia', 'Ireland': 'Europe', 'Israel': 'Asia', 'Italy': 'Europe', 'Jamaica': 'North America', \n",
    "    'Japan': 'Asia', 'Jordan': 'Asia', 'Kazakhstan': 'Asia', 'Kenya': 'Africa', 'Kiribati': 'Oceania', 'Kuwait': 'Asia', \n",
    "    'Kyrgyzstan': 'Asia', 'Laos': 'Asia', 'Latvia': 'Europe', 'Lebanon': 'Asia', 'Lesotho': 'Africa', 'Liberia': 'Africa', \n",
    "    'Libya': 'Africa', 'Liechtenstein': 'Europe', 'Lithuania': 'Europe', 'Luxembourg': 'Europe', 'Macao': 'Asia', \n",
    "    'Madagascar': 'Africa', 'Malawi': 'Africa', 'Malaysia': 'Asia', 'Maldives': 'Asia', 'Mali': 'Africa', 'Malta': 'Europe', \n",
    "    'Marshall Islands': 'Oceania', 'Martinique': 'North America', 'Mauritania': 'Africa', 'Mauritius': 'Africa', 'Mexico': 'North America', \n",
    "    'Micronesia (country)': 'Oceania', 'Moldova': 'Europe', 'Mongolia': 'Asia', 'Montenegro': 'Europe', 'Montserrat': 'North America', \n",
    "    'Morocco': 'Africa', 'Mozambique': 'Africa', 'Myanmar': 'Asia', 'Namibia': 'Africa', 'Nepal': 'Asia', 'Netherlands': 'Europe', \n",
    "    'New Caledonia': 'Oceania', 'New Zealand': 'Oceania', 'Nicaragua': 'North America', 'Niger': 'Africa', 'Nigeria': 'Africa', \n",
    "    'Niue': 'Oceania', 'North Korea': 'Asia', 'North Macedonia': 'Europe', 'Norway': 'Europe', 'Oman': 'Asia', 'Pakistan': 'Asia', \n",
    "    'Palau': 'Oceania', 'Panama': 'North America', 'Papua New Guinea': 'Oceania', 'Paraguay': 'South America', 'Peru': 'South America', \n",
    "    'Philippines': 'Asia', 'Poland': 'Europe', 'Portugal': 'Europe', 'Puerto Rico': 'North America', 'Qatar': 'Asia', 'Reunion': 'Africa', \n",
    "    'Romania': 'Europe', 'Russia': 'Europe', 'Rwanda': 'Africa', 'Saint Kitts and Nevis': 'North America', 'Saint Lucia': 'North America', \n",
    "    'Saint Pierre and Miquelon': 'North America', 'Saint Vincent and the Grenadines': 'North America', 'Samoa': 'Oceania', \n",
    "    'Sao Tome and Principe': 'Africa', 'Saudi Arabia': 'Asia', 'Senegal': 'Africa', 'Serbia': 'Europe', 'Seychelles': 'Africa', \n",
    "    'Sierra Leone': 'Africa', 'Singapore': 'Asia', 'Sint Maarten (Dutch part)': 'North America', 'Slovakia': 'Europe', 'Slovenia': 'Europe', \n",
    "    'Solomon Islands': 'Oceania', 'Somalia': 'Africa', 'South Africa': 'Africa', 'South Korea': 'Asia', 'South Sudan': 'Africa', \n",
    "    'Spain': 'Europe', 'Sri Lanka': 'Asia', 'Sudan': 'Africa', 'Suriname': 'South America', 'Sweden': 'Europe', 'Switzerland': 'Europe', \n",
    "    'Syria': 'Asia', 'Taiwan': 'Asia', 'Tajikistan': 'Asia', 'Tanzania': 'Africa', 'Thailand': 'Asia', 'Timor': 'Asia', 'Togo': 'Africa', \n",
    "    'Tokelau': 'Oceania', 'Tonga': 'Oceania', 'Trinidad and Tobago': 'North America', 'Tunisia': 'Africa', 'Turkey': 'Asia', \n",
    "    'Turkmenistan': 'Asia', 'Turks and Caicos Islands': 'North America', 'Uganda': 'Africa', 'Ukraine': 'Europe', 'United Arab Emirates': 'Asia', \n",
    "    'United Kingdom': 'Europe', 'United States': 'North America', 'Uruguay': 'South America', 'Uzbekistan': 'Asia', 'Vanuatu': 'Oceania', \n",
    "    'Venezuela': 'South America', 'Vietnam': 'Asia', 'Wallis and Futuna': 'Oceania', 'Yemen': 'Asia', 'Zambia': 'Africa', 'Zimbabwe': 'Africa'\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f58dc142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.605059Z",
     "iopub.status.busy": "2024-07-10T11:26:49.604391Z",
     "iopub.status.idle": "2024-07-10T11:26:49.620789Z",
     "shell.execute_reply": "2024-07-10T11:26:49.619650Z"
    },
    "papermill": {
     "duration": 0.028136,
     "end_time": "2024-07-10T11:26:49.623198",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.595062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Entity  Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
      "0  Afghanistan  1750             555.47860                        174.87167   \n",
      "1  Afghanistan  1760             578.50757                        181.99332   \n",
      "2  Afghanistan  1770             602.47980                        189.38850   \n",
      "3  Afghanistan  1780             627.43220                        197.06535   \n",
      "4  Afghanistan  1790             653.40310                        205.03189   \n",
      "\n",
      "   Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
      "0                       142073.31                      5456.8850   \n",
      "1                       147859.23                      5679.1167   \n",
      "2                       153867.40                      5909.8840   \n",
      "3                       160104.42                      6149.4410   \n",
      "4                       166576.77                      6398.0370   \n",
      "\n",
      "   Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
      "0                                          13596.633          \n",
      "1                                          14150.870          \n",
      "2                                          14726.470          \n",
      "3                                          15324.077          \n",
      "4                                          15944.332          \n",
      "\n",
      "   Black carbon (BC) emissions  Ammonia (NH₃) emissions Continent  \n",
      "0                    1633.0308                7681.0464      Asia  \n",
      "1                    1699.5359                8000.8574      Asia  \n",
      "2                    1768.5956                8333.9610      Asia  \n",
      "3                    1840.2854                8680.9060      Asia  \n",
      "4                    1914.6805                9042.2660      Asia  \n"
     ]
    }
   ],
   "source": [
    "# Agregamos al dataset una columna que muestre el contienente del pais\n",
    "\n",
    "air_df['Continent'] = air_df['Entity'].map(continent_mapping)\n",
    "\n",
    "# Mostrar las primeras filas para verificar\n",
    "print(air_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63e9f1c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.641769Z",
     "iopub.status.busy": "2024-07-10T11:26:49.640985Z",
     "iopub.status.idle": "2024-07-10T11:26:49.652937Z",
     "shell.execute_reply": "2024-07-10T11:26:49.651688Z"
    },
    "papermill": {
     "duration": 0.023771,
     "end_time": "2024-07-10T11:26:49.655295",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.631524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entity                                                         0\n",
      "Year                                                           0\n",
      "Nitrogen oxide (NOx)                                           0\n",
      "Sulphur dioxide (SO₂) emissions                                0\n",
      "Carbon monoxide (CO) emissions                                 0\n",
      "Organic carbon (OC) emissions                                  0\n",
      "Non-methane volatile organic compounds (NMVOC) emissions       0\n",
      "Black carbon (BC) emissions                                    0\n",
      "Ammonia (NH₃) emissions                                        0\n",
      "Continent                                                   2694\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(air_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "34dd7a03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.673800Z",
     "iopub.status.busy": "2024-07-10T11:26:49.673444Z",
     "iopub.status.idle": "2024-07-10T11:26:49.683473Z",
     "shell.execute_reply": "2024-07-10T11:26:49.682388Z"
    },
    "papermill": {
     "duration": 0.021883,
     "end_time": "2024-07-10T11:26:49.685600",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.663717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Africa' 'Asia' 'Europe' 'High-income countries' 'Low-income countries'\n",
      " 'Lower-middle-income countries' 'North America' 'Oceania' 'South America'\n",
      " 'United States Virgin Islands' 'Upper-middle-income countries'\n",
      " 'Western Sahara' 'World']\n"
     ]
    }
   ],
   "source": [
    "df_entidades = air_df[air_df['Continent'].isna()]\n",
    "\n",
    "# Mostrar los países con continente nulo\n",
    "print(df_entidades['Entity'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f17aee89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.704491Z",
     "iopub.status.busy": "2024-07-10T11:26:49.703625Z",
     "iopub.status.idle": "2024-07-10T11:26:49.719182Z",
     "shell.execute_reply": "2024-07-10T11:26:49.718298Z"
    },
    "papermill": {
     "duration": 0.027767,
     "end_time": "2024-07-10T11:26:49.721719",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.693952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "air_df.dropna(subset=['Continent'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fb7e889f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.740605Z",
     "iopub.status.busy": "2024-07-10T11:26:49.739777Z",
     "iopub.status.idle": "2024-07-10T11:26:49.752439Z",
     "shell.execute_reply": "2024-07-10T11:26:49.751195Z"
    },
    "papermill": {
     "duration": 0.024406,
     "end_time": "2024-07-10T11:26:49.754709",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.730303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entity                                                      0\n",
      "Year                                                        0\n",
      "Nitrogen oxide (NOx)                                        0\n",
      "Sulphur dioxide (SO₂) emissions                             0\n",
      "Carbon monoxide (CO) emissions                              0\n",
      "Organic carbon (OC) emissions                               0\n",
      "Non-methane volatile organic compounds (NMVOC) emissions    0\n",
      "Black carbon (BC) emissions                                 0\n",
      "Ammonia (NH₃) emissions                                     0\n",
      "Continent                                                   0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(air_df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bd690d39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.773984Z",
     "iopub.status.busy": "2024-07-10T11:26:49.773040Z",
     "iopub.status.idle": "2024-07-10T11:26:49.788929Z",
     "shell.execute_reply": "2024-07-10T11:26:49.787960Z"
    },
    "papermill": {
     "duration": 0.027857,
     "end_time": "2024-07-10T11:26:49.791233",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.763376",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "      <th>Continent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1750</td>\n",
       "      <td>17671.812</td>\n",
       "      <td>7693.8726</td>\n",
       "      <td>3283140.0</td>\n",
       "      <td>174831.50</td>\n",
       "      <td>420443.03</td>\n",
       "      <td>47376.312</td>\n",
       "      <td>294775.34</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1760</td>\n",
       "      <td>17750.662</td>\n",
       "      <td>7700.5747</td>\n",
       "      <td>3288960.8</td>\n",
       "      <td>175004.75</td>\n",
       "      <td>420842.38</td>\n",
       "      <td>47419.586</td>\n",
       "      <td>295370.38</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1770</td>\n",
       "      <td>17836.184</td>\n",
       "      <td>7709.6570</td>\n",
       "      <td>3295845.2</td>\n",
       "      <td>175232.31</td>\n",
       "      <td>421382.25</td>\n",
       "      <td>47477.630</td>\n",
       "      <td>296091.75</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1780</td>\n",
       "      <td>17928.623</td>\n",
       "      <td>7721.0396</td>\n",
       "      <td>3303775.8</td>\n",
       "      <td>175512.27</td>\n",
       "      <td>422058.16</td>\n",
       "      <td>47549.906</td>\n",
       "      <td>296939.34</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1790</td>\n",
       "      <td>18028.533</td>\n",
       "      <td>7734.8390</td>\n",
       "      <td>3312819.8</td>\n",
       "      <td>175845.30</td>\n",
       "      <td>422879.56</td>\n",
       "      <td>47636.790</td>\n",
       "      <td>297921.56</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Entity  Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
       "228  Africa  1750             17671.812                        7693.8726   \n",
       "229  Africa  1760             17750.662                        7700.5747   \n",
       "230  Africa  1770             17836.184                        7709.6570   \n",
       "231  Africa  1780             17928.623                        7721.0396   \n",
       "232  Africa  1790             18028.533                        7734.8390   \n",
       "\n",
       "     Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
       "228                       3283140.0                      174831.50   \n",
       "229                       3288960.8                      175004.75   \n",
       "230                       3295845.2                      175232.31   \n",
       "231                       3303775.8                      175512.27   \n",
       "232                       3312819.8                      175845.30   \n",
       "\n",
       "     Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "228                                          420443.03          \n",
       "229                                          420842.38          \n",
       "230                                          421382.25          \n",
       "231                                          422058.16          \n",
       "232                                          422879.56          \n",
       "\n",
       "     Black carbon (BC) emissions  Ammonia (NH₃) emissions Continent  \n",
       "228                    47376.312                294775.34       NaN  \n",
       "229                    47419.586                295370.38       NaN  \n",
       "230                    47477.630                296091.75       NaN  \n",
       "231                    47549.906                296939.34       NaN  \n",
       "232                    47636.790                297921.56       NaN  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_entidades.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6b6cb45d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.810491Z",
     "iopub.status.busy": "2024-07-10T11:26:49.809857Z",
     "iopub.status.idle": "2024-07-10T11:26:49.815054Z",
     "shell.execute_reply": "2024-07-10T11:26:49.814097Z"
    },
    "papermill": {
     "duration": 0.017408,
     "end_time": "2024-07-10T11:26:49.817296",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.799888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_entidades2=df_entidades.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "05583cad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.837008Z",
     "iopub.status.busy": "2024-07-10T11:26:49.836086Z",
     "iopub.status.idle": "2024-07-10T11:26:49.852573Z",
     "shell.execute_reply": "2024-07-10T11:26:49.851595Z"
    },
    "papermill": {
     "duration": 0.02881,
     "end_time": "2024-07-10T11:26:49.855068",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.826258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "      <th>Continent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1750</td>\n",
       "      <td>17671.812</td>\n",
       "      <td>7693.8726</td>\n",
       "      <td>3283140.0</td>\n",
       "      <td>174831.50</td>\n",
       "      <td>420443.03</td>\n",
       "      <td>47376.312</td>\n",
       "      <td>294775.34</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1760</td>\n",
       "      <td>17750.662</td>\n",
       "      <td>7700.5747</td>\n",
       "      <td>3288960.8</td>\n",
       "      <td>175004.75</td>\n",
       "      <td>420842.38</td>\n",
       "      <td>47419.586</td>\n",
       "      <td>295370.38</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1770</td>\n",
       "      <td>17836.184</td>\n",
       "      <td>7709.6570</td>\n",
       "      <td>3295845.2</td>\n",
       "      <td>175232.31</td>\n",
       "      <td>421382.25</td>\n",
       "      <td>47477.630</td>\n",
       "      <td>296091.75</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1780</td>\n",
       "      <td>17928.623</td>\n",
       "      <td>7721.0396</td>\n",
       "      <td>3303775.8</td>\n",
       "      <td>175512.27</td>\n",
       "      <td>422058.16</td>\n",
       "      <td>47549.906</td>\n",
       "      <td>296939.34</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1790</td>\n",
       "      <td>18028.533</td>\n",
       "      <td>7734.8390</td>\n",
       "      <td>3312819.8</td>\n",
       "      <td>175845.30</td>\n",
       "      <td>422879.56</td>\n",
       "      <td>47636.790</td>\n",
       "      <td>297921.56</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Entity  Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
       "228  Africa  1750             17671.812                        7693.8726   \n",
       "229  Africa  1760             17750.662                        7700.5747   \n",
       "230  Africa  1770             17836.184                        7709.6570   \n",
       "231  Africa  1780             17928.623                        7721.0396   \n",
       "232  Africa  1790             18028.533                        7734.8390   \n",
       "\n",
       "     Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
       "228                       3283140.0                      174831.50   \n",
       "229                       3288960.8                      175004.75   \n",
       "230                       3295845.2                      175232.31   \n",
       "231                       3303775.8                      175512.27   \n",
       "232                       3312819.8                      175845.30   \n",
       "\n",
       "     Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "228                                          420443.03          \n",
       "229                                          420842.38          \n",
       "230                                          421382.25          \n",
       "231                                          422058.16          \n",
       "232                                          422879.56          \n",
       "\n",
       "     Black carbon (BC) emissions  Ammonia (NH₃) emissions Continent  \n",
       "228                    47376.312                294775.34       NaN  \n",
       "229                    47419.586                295370.38       NaN  \n",
       "230                    47477.630                296091.75       NaN  \n",
       "231                    47549.906                296939.34       NaN  \n",
       "232                    47636.790                297921.56       NaN  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_entidades.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bf2efe9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.876472Z",
     "iopub.status.busy": "2024-07-10T11:26:49.875708Z",
     "iopub.status.idle": "2024-07-10T11:26:49.882156Z",
     "shell.execute_reply": "2024-07-10T11:26:49.881097Z"
    },
    "papermill": {
     "duration": 0.019658,
     "end_time": "2024-07-10T11:26:49.884911",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.865253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1380820140.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_entidades.drop(columns='Continent',inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df_entidades.drop(columns='Continent',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f112286f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.904869Z",
     "iopub.status.busy": "2024-07-10T11:26:49.904211Z",
     "iopub.status.idle": "2024-07-10T11:26:49.919965Z",
     "shell.execute_reply": "2024-07-10T11:26:49.919009Z"
    },
    "papermill": {
     "duration": 0.028101,
     "end_time": "2024-07-10T11:26:49.922036",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.893935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Year</th>\n",
       "      <th>Nitrogen oxide (NOx)</th>\n",
       "      <th>Sulphur dioxide (SO₂) emissions</th>\n",
       "      <th>Carbon monoxide (CO) emissions</th>\n",
       "      <th>Organic carbon (OC) emissions</th>\n",
       "      <th>Non-methane volatile organic compounds (NMVOC) emissions</th>\n",
       "      <th>Black carbon (BC) emissions</th>\n",
       "      <th>Ammonia (NH₃) emissions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1750</td>\n",
       "      <td>17671.812</td>\n",
       "      <td>7693.8726</td>\n",
       "      <td>3283140.0</td>\n",
       "      <td>174831.50</td>\n",
       "      <td>420443.03</td>\n",
       "      <td>47376.312</td>\n",
       "      <td>294775.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1760</td>\n",
       "      <td>17750.662</td>\n",
       "      <td>7700.5747</td>\n",
       "      <td>3288960.8</td>\n",
       "      <td>175004.75</td>\n",
       "      <td>420842.38</td>\n",
       "      <td>47419.586</td>\n",
       "      <td>295370.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1770</td>\n",
       "      <td>17836.184</td>\n",
       "      <td>7709.6570</td>\n",
       "      <td>3295845.2</td>\n",
       "      <td>175232.31</td>\n",
       "      <td>421382.25</td>\n",
       "      <td>47477.630</td>\n",
       "      <td>296091.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1780</td>\n",
       "      <td>17928.623</td>\n",
       "      <td>7721.0396</td>\n",
       "      <td>3303775.8</td>\n",
       "      <td>175512.27</td>\n",
       "      <td>422058.16</td>\n",
       "      <td>47549.906</td>\n",
       "      <td>296939.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>Africa</td>\n",
       "      <td>1790</td>\n",
       "      <td>18028.533</td>\n",
       "      <td>7734.8390</td>\n",
       "      <td>3312819.8</td>\n",
       "      <td>175845.30</td>\n",
       "      <td>422879.56</td>\n",
       "      <td>47636.790</td>\n",
       "      <td>297921.56</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Entity  Year  Nitrogen oxide (NOx)  Sulphur dioxide (SO₂) emissions  \\\n",
       "228  Africa  1750             17671.812                        7693.8726   \n",
       "229  Africa  1760             17750.662                        7700.5747   \n",
       "230  Africa  1770             17836.184                        7709.6570   \n",
       "231  Africa  1780             17928.623                        7721.0396   \n",
       "232  Africa  1790             18028.533                        7734.8390   \n",
       "\n",
       "     Carbon monoxide (CO) emissions  Organic carbon (OC) emissions  \\\n",
       "228                       3283140.0                      174831.50   \n",
       "229                       3288960.8                      175004.75   \n",
       "230                       3295845.2                      175232.31   \n",
       "231                       3303775.8                      175512.27   \n",
       "232                       3312819.8                      175845.30   \n",
       "\n",
       "     Non-methane volatile organic compounds (NMVOC) emissions  \\\n",
       "228                                          420443.03          \n",
       "229                                          420842.38          \n",
       "230                                          421382.25          \n",
       "231                                          422058.16          \n",
       "232                                          422879.56          \n",
       "\n",
       "     Black carbon (BC) emissions  Ammonia (NH₃) emissions  \n",
       "228                    47376.312                294775.34  \n",
       "229                    47419.586                295370.38  \n",
       "230                    47477.630                296091.75  \n",
       "231                    47549.906                296939.34  \n",
       "232                    47636.790                297921.56  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_entidades.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "93918597",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:49.942866Z",
     "iopub.status.busy": "2024-07-10T11:26:49.941989Z",
     "iopub.status.idle": "2024-07-10T11:26:50.359633Z",
     "shell.execute_reply": "2024-07-10T11:26:50.358408Z"
    },
    "papermill": {
     "duration": 0.430435,
     "end_time": "2024-07-10T11:26:50.361944",
     "exception": false,
     "start_time": "2024-07-10T11:26:49.931509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El DataFrame ha sido exportado exitosamente a 'contaminacion_paises.csv'\n",
      "El DataFrame ha sido exportado exitosamente a 'contaminacion_entidades.csv'\n"
     ]
    }
   ],
   "source": [
    "air_df.to_csv('contaminacion_paises.csv', index=False)\n",
    "\n",
    "print(\"El DataFrame ha sido exportado exitosamente a 'contaminacion_paises.csv'\")\n",
    "\n",
    "df_entidades.to_csv('contaminacion_entidades.csv', index=False)\n",
    "\n",
    "print(\"El DataFrame ha sido exportado exitosamente a 'contaminacion_entidades.csv'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "53864101",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:50.382590Z",
     "iopub.status.busy": "2024-07-10T11:26:50.382209Z",
     "iopub.status.idle": "2024-07-10T11:26:50.387726Z",
     "shell.execute_reply": "2024-07-10T11:26:50.386682Z"
    },
    "papermill": {
     "duration": 0.018492,
     "end_time": "2024-07-10T11:26:50.389973",
     "exception": false,
     "start_time": "2024-07-10T11:26:50.371481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "contaminantes = air_df.columns.difference(['Year', 'Entity', 'Continent'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "43f239dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:50.410710Z",
     "iopub.status.busy": "2024-07-10T11:26:50.410311Z",
     "iopub.status.idle": "2024-07-10T11:26:50.415884Z",
     "shell.execute_reply": "2024-07-10T11:26:50.414902Z"
    },
    "papermill": {
     "duration": 0.0184,
     "end_time": "2024-07-10T11:26:50.418050",
     "exception": false,
     "start_time": "2024-07-10T11:26:50.399650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Ammonia (NH₃) emissions', 'Black carbon (BC) emissions',\n",
      "       'Carbon monoxide (CO) emissions', 'Nitrogen oxide (NOx)',\n",
      "       'Non-methane volatile organic compounds (NMVOC) emissions',\n",
      "       'Organic carbon (OC) emissions', 'Sulphur dioxide (SO₂) emissions'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(contaminantes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "21a447cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:50.439059Z",
     "iopub.status.busy": "2024-07-10T11:26:50.438684Z",
     "iopub.status.idle": "2024-07-10T11:26:50.453001Z",
     "shell.execute_reply": "2024-07-10T11:26:50.451993Z"
    },
    "papermill": {
     "duration": 0.027493,
     "end_time": "2024-07-10T11:26:50.455412",
     "exception": false,
     "start_time": "2024-07-10T11:26:50.427919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "suma_contaminantes_por_año = air_df.groupby('Year')[contaminantes].sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "405a9fdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:50.476280Z",
     "iopub.status.busy": "2024-07-10T11:26:50.475877Z",
     "iopub.status.idle": "2024-07-10T11:26:51.130331Z",
     "shell.execute_reply": "2024-07-10T11:26:51.129253Z"
    },
    "papermill": {
     "duration": 0.668648,
     "end_time": "2024-07-10T11:26:51.133692",
     "exception": false,
     "start_time": "2024-07-10T11:26:50.465044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14, 8))\n",
    "\n",
    "for contaminante in contaminantes:\n",
    "    sns.lineplot(data=suma_contaminantes_por_año, x='Year', y=contaminante, label=contaminante)\n",
    "\n",
    "plt.title('Sumatoria de Emisiones de Contaminantes por Año')\n",
    "plt.xlabel('Año')\n",
    "plt.ylabel('Sumatoria de Emisiones')\n",
    "plt.legend(title='Contaminante')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da9e37de",
   "metadata": {
    "papermill": {
     "duration": 0.010951,
     "end_time": "2024-07-10T11:26:51.155972",
     "exception": false,
     "start_time": "2024-07-10T11:26:51.145021",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Global sustainable energy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4b295f22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-10T11:26:51.180240Z",
     "iopub.status.busy": "2024-07-10T11:26:51.179812Z",
     "iopub.status.idle": "2024-07-10T11:26:51.210349Z",
     "shell.execute_reply": "2024-07-10T11:26:51.209476Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.045422,
     "end_time": "2024-07-10T11:26:51.212794",
     "exception": false,
     "start_time": "2024-07-10T11:26:51.167372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "path_ene='/kaggle/input/global-data-on-sustainable-energy/global-data-on-sustainable-energy (1).csv'\n",
    "energ_df=pd.read_csv(path_ene)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3597085,
     "sourceId": 6327347,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5091966,
     "sourceId": 8526914,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.531228,
   "end_time": "2024-07-10T11:26:51.844681",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-10T11:26:44.313453",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
